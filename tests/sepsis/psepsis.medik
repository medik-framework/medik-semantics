machine MeasurementBounds
  receives AgeEntered
         , HighRiskConditionsEntered {

  vars age, weight;

  vars hrUpperBound          , hrLowerBound
     , bpSysUpperBound       , bpSysLowerBound
     , tempUpperBound        , tempLowerBound
     , coreTempUpperBound    , coreTempLowerBound
     , mapUpperBound         , mapLowerBound
     , baseExcessUpperBound  , baseExcessLowerBound
     , lactateUpperBound     , lactateLowerBound
     , urineOutputUpperBound , urineOutputLowerBound;

  var pulseQuality       = "normal";
  var capillaryRefill    = "1ms";
  var skinColor          = "normal";
  var mentalStatus       = "normal";
  var highRiskConditions = 0;

  fun days(age) {
    return age;
  }

  fun months(age) {
    return 30 * age;
  }

  fun years(age) {
    return 365 * age;
  }

  fun ageInYears(age) {
    return age / 365;
  }

  fun safeHRLowerBound(age) {
    days(age) in {
        interval(days(0)  , months(1)) : return 100;
        interval(months(1), months(2)) : return 100;
        interval(months(2), years(1))  : return 90;
        interval(years(1),  years(2))  : return 80;
        interval(years(2),  years(4))  : return 70;
        interval(years(4),  years(6))  : return 60;
        interval(years(6),  years(10)) : return 60;
        interval(years(10), years(13)) : return 60;
        default                        : return 60;
    }
  }

  fun safeHRUpperBound(age) {
    days(age) in {
        interval(days(0)  , months(1)) : return 205;
        interval(months(1), months(2)) : return 205;
        interval(months(2), years(1))  : return 190;
        interval(years(1),  years(2))  : return 190;
        interval(years(2),  years(4))  : return 140;
        interval(years(4),  years(6))  : return 140;
        interval(years(6),  years(10)) : return 140;
        interval(years(10), years(13)) : return 100;
        default                        : return 100;
    }
  }

  fun safeBpSysLowerBound(age) {
    days(age) in {
        interval(days(0)  , months(1)) : return 60;
        interval(months(1), months(2)) : return 70;
        interval(months(2), years(1))  : return 70;
        interval(years(1),  years(2))  : return 70 + (ageInYears(age) * 2);
        interval(years(2),  years(4))  : return 70 + (ageInYears(age) * 2);
        interval(years(4),  years(6))  : return 70 + (ageInYears(age) * 2);
        interval(years(6),  years(10)) : return 70 + (ageInYears(age) * 2);
        interval(years(10), years(13)) : return 90;
        default                        : return 90;
    }
  }

  fun safeBpSysUpperBound(age) {
    days(age) in {
        interval(days(0)  , months(1)) : return 180;
        interval(months(1), months(2)) : return 180;
        interval(months(2), years(1))  : return 180;
        interval(years(1),  years(2))  : return 180;
        interval(years(2),  years(4))  : return 180;
        interval(years(4),  years(6))  : return 180;
        interval(years(6),  years(10)) : return 180;
        interval(years(10), years(13)) : return 180;
        default                        : return 180;
    }
  }

  fun safeTempLowerBound(age) {
    days(age) in {
        interval(days(0)  , months(1)) : return 36;
        interval(months(1), months(2)) : return 36;
        interval(months(2), years(1))  : return 36;
        interval(years(1),  years(2))  : return 36;
        interval(years(2),  years(4))  : return 36;
        interval(years(4),  years(6))  : return 36;
        interval(years(6),  years(10)) : return 36;
        interval(years(10), years(13)) : return 36;
        default                        : return 36;
    }
  }

  fun safeTempUpperBound(age) {
    days(age) in {
        interval(days(0)  , months(1)) : return 38;
        interval(months(1), months(2)) : return 38;
        interval(months(2), years(1))  : return 39;
        interval(years(1),  years(2))  : return 39;
        interval(years(2),  years(4))  : return 39;
        interval(years(4),  years(6))  : return 39;
        interval(years(6),  years(10)) : return 39;
        interval(years(10), years(13)) : return 39;
        default                        : return 39;
    }
  }

  init state Running {
    on AgeEntered(age) do {
      this.age = age;

      this.hrLowerBound    = safeHRLowerBound(age);
      this.hrUpperBound    = safeHRUpperBound(age);

      this.bpSysLowerBound = safeBpSysLowerBound(age);
      this.bpSysUpperBound = safeBpSysUpperBound(age);

      this.tempLowerBound  = safeTempLowerBound(age);
      this.tempUpperBound  = safeTempUpperBound(age);

      broadcast ConfirmAgeEntered;
      goto Running;
    }

    on HighRiskConditionsEntered(highRiskConditions) do {
      this.highRiskConditions = highRiskConditions;

      broadcast ConfirmHighRiskConditionsEntered;
    }
  }
}

interface TabletApp
  receives  ConfirmAgeEntered
          , ConfirmWeightEntered
          , ConfirmHighRiskConditionsEntered { }

interface Datastore {  }
//
//interface Sensors {  }

machine SepsisScreening
  receives  ConfirmAgeEntered
          , StartScreening
          , ConfirmWeightEntered
          , ConfirmHighRiskConditionsEntered
          , ConfirmMeasurementsObtained {

  vars tabletApp, datastore, measurementBounds;

  init state Start {
    entry (tabletApp, datastore, measurementBounds) {
      this.tabletApp           = tabletApp;
      this.datastore           = datastore;
      this.measurementBounds   = measurementBounds;
    }
    on StartScreening do {
      goto  ObtainAge;
    }
    on ConfirmAgeEntered do {
      goto Start(this.tabletApp, this.datastore, this.measurementBounds);
    }
  }

  state ObtainAge {
    entry {
      if (measurementBounds.age == undef) {
        send tabletApp, Instruct, ("Enter patient age");
      } else {
        goto ObtainHighRiskConditions;
      }
    }
    on ConfirmAgeEntered do {
      goto ObtainHighRiskConditions;
    }
  }

  state ObtainHighRiskConditions{
    entry {
      if (measurementBounds.highRiskConditions == undef) {
        send tabletApp, Instruct, ("Enter high risk conditions");
      } else {
        goto ObtainMeasurements;
      }
    }
    on ConfirmHighRiskConditionsEntered do {
      goto ObtainMeasurements;
    }
  }

  state ObtainMeasurements {
    entry {
      send tabletApp, Instruct, ("Obtain Measurements");
    }
    on ConfirmMeasurementsObtained do {
      goto CalculateScore;
    }
  }

  state CalculatePSepsisScore {
    entry{
      print("Came to calculate score\n");
      exit;
    }
  }

  fun isInNormalRange(parameter, normalLowerBound, normalUpperBound) {
    var storedMeasurement = obtainFrom(datastore, parameter);
    if (!(storedMeasurement == undef)) {
      return ((storedMeasurement >= normalLowerBound) && (storedMeasurement < normalUpperBound));
    } else {
      return true;
    }
  }

  fun isNormal(parameter, normalMeasurement) {
    var storedMeasurement = obtainFrom(datastore, parameter);
    if (!(storedMeasurement == undef)) {
      return storedMeasurement == normalMeasurement;
    } else {
      return true;
    }
  }


  state CalculateScore {
    entry() {
      print("Calculating score");
      var hrAbnormal              = !isInNormalRange("hr",          measurementBounds.hrLowerBound,    measurementBounds.hrUpperBound);
      var bpSysAbnormal           = !isInNormalRange("bpSys",       measurementBounds.bpSysLowerBound, measurementBounds.bpSysUpperBound);
      var tempAbnormal            = !isInNormalRange("temp",        measurementBounds.tempLowerBound,  measurementBounds.tempUpperBound);
      var pulseQualityAbnormal    = !isNormal("pulseQuality",       measurementBounds.pulseQuality);
      var mentalStatusAbnormal    = !isNormal("mentalStatus",       measurementBounds.mentalStatus);
      var capillaryRefillAbnormal = !isNormal("capillaryRefill",    measurementBounds.capillaryRefill);
      var skinColorAbnormal       = !isNormal("skinColor",          measurementBounds.skinColor);
      var highRiskConditions      = !isNormal("highRiskConditions", measurementBounds.highRiskConditions);

      var bucket1 = hrAbnormal || bpAbnormal || pqAbnormal;

      var bucket2 = tempAbnormal;

      var perfusion = capillaryRefillAbnormal || skinColorAbnormal;
      var bucket3   = mentalStatusAbnormal    || prefusion || highRiskConditions;

      var sepsisSuspected = bucket1 || bucket2 || bucket3;
      send tabletApp, DisplayDiagnosis, ( { "hrAbnormal"              : hrAbnormal
                                          , "bpSysAbnormal"           : bpSysAbnormal
                                          , "pulseQualitAbnormal"     : pulseQualityAbnormal
                                          , "tempAbnormal"            : tempAbnormal
                                          , "mentalStatusAbnormal"    : mentalStatusAbnormal
                                          , "capillaryRefillAbnormal" : capillaryRefillAbnormal
                                          , "skinColorAbnormal"       : skinColorAbnormal
                                          , "highRiskConditions"      : highRiskConditions });

      //if (sepsisSuspected) {
      //  broadcast SepsisSuspected;
      //} else {
      //  sleep(30);
      //  goto ObtainMeasurements;
      //}
    }
  }
}


init machine PSepsisGuidanceSystem receives StopGuidance {
  vars tabletApp, datastore, measurementBounds;

  init state CreateMachines {
    entry {
      tabletApp = createFromInterface(TabletApp, "tabletApp");
      datastore = createFromInterface(Datastore, "datastore");
      measurementBounds = new MeasurementBounds();
      new SepsisScreening(tabletApp, datastore, measurementBounds);
    }
  }

  //init state CreateMachines {
  //  entry {
  //    send tabletApp, Instruct, ("Enter Age and Weight");
  //    //new SepsisScreening(tabletApp, datastore, measurementBounds);
  //    //new AntibioticTherapy();
  //    //new SepsisScreening();
  //    //new FluidTherapy();
  //    //new SepticShockScreening();
  //    //new IonotropicSupportTherapy(); }

  //  on StopGuidance do {
  //    // savelog();
  //  }

  //}
}

//machine SepticShockScreening receives SepsisSuspected {
//  var measurementBounds;
//
//  fun lowerThanIfPresent(parameter, lowerBound) {
//    val storedMeasurement = obtainFrom(datastore, parameter);
//    if (!(stored is undef)) {
//      return storedMeasurement < measurementBounds.parameter;
//    } else {
//      return true;
//    }
//  }
//
//  fun equalToIfPresent(parameter, upperBound) {
//    val storedMeasurement = obtainFrom(datastore, parameter);
//    if (!(stored is undef)) {
//      return storedMeasurement > measurementBounds.parameter;
//    } else {
//      return true;
//    }
//  }
//
//  fun greaterThanIfPresent(parameter, upperBound) {
//    val storedMeasurement = obtainFrom(datastore, parameter);
//    if (!(stored is undef)) {
//      return storedMeasurement > measurementBounds.parameter;
//    } else {
//      return true;
//    }
//  }
//
//  init state Start {
//    entry(measurementBounds) {
//      this.measurementBounds = measurementBounds;
//    }
//
//    on SepsisSuspected do {
//      var meanArterialPressureAbnormal = lowerThanIfPresent("meanArterialPressure", measurementBounds.normalMeanArterialPressure)
//
//      if (meanArterialPressureAbnormal) {
//        broadcast SepticShockSuspected;
//      } else {
//        if (   (obtainFrom(datastore, "ephinephrineDose")   > 5)
//            || (obtainFrom(datastore, "norepinephrineDose") > 5)
//            || (obtainFrom(datastore, "dopamineDose")       > 5) ) {
//          broadcast SepticShockSuspected;
//        }
//      } else {
//        var perfusion = 0;
//        if ( lowerThanIfPressent("baseExcess", -5)) {
//          perfusion = perfusion + 1;
//        }
//
//        if ( greaterThanIfPresent("lactate", 2 * measurementBounds.normalLactate)) {
//          perfusion = perfusion + 1;
//        }
//
//        if ( lessThanIfPresent("urineOutput", 0.5)) {
//          perfusion = perfusion + 1;
//        }
//
//        if ( equalToIfPresent("capillaryRefill", ">5s")) {
//          perfusion = perfusion + 1;
//        }
//        // Todo Implement
//
//        if (perfusion > 2) {
//          broadcast SepticShockSuspected;
//        }
//  }
//}
//
//machine AntiboiticTherapy {
//
//}

