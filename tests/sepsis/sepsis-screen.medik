machine MeasurementsBounds
  receives AgeEntered
         , HighRiskConditionsEntered {

  vars age, weight, highRiskConditions;

  vars hrUpperBound          , hrLowerBound
     , bpSysUpperBound       , bpSysLowerBound
     , tempUpperBound        , tempLowerBound
     , coreTempUpperBound    , coreTempLowerBound
     , mapUpperBound         , mapLowerBound
     , baseExcessUpperBound  , baseExcessUpperBound
     , lactateLowerBound     , lactateUpperBound
     , urineOutputLowerBoudn , urineOutputUpperBound;

  vars pulseQuality, capillaryRefill, skinColor, mentalStatus;

  var highRiskConditions;
  vars epinephrineBounds, norepinephrineBounds, dopamineBounds;

  fun days(age) {
    return age;
  }

  fun months(age) {
    return 30 * age;
  }

  fun ageInYears(age) {
    return age / 365;
  }

  fun safeHRLowerBound(age) {
    days(age) in {
        interval(days(0)  , months(1)) : return 100;
        interval(months(1), month(2))  : return 100;
        interval(months(2), years(1))  : return 90;
        interval(years(1),  years(2))  : return 80;
        interval(years(2),  years(4))  : return 70;
        interval(years(4),  years(6))  : return 60;
        interval(years(6),  years(10)) : return 60;
        interval(years(10), years(13)) : return 60;
        default                        : return 60;
    }
  }

  fun safeHRLowerBound(age) {
    days(age) in {
        interval(days(0)  , months(1)) : return 205;
        interval(months(1), month(2))  : return 205;
        interval(months(2), years(1))  : return 190;
        interval(years(1),  years(2))  : return 190;
        interval(years(2),  years(4))  : return 140;
        interval(years(4),  years(6))  : return 140;
        interval(years(6),  years(10)) : return 140;
        interval(years(10), years(13)) : return 100;
        default                        : return 100;
    }
  }

  fun safeBpSysLowerBound(age) {
    days(age) in {
        interval(days(0)  , months(1)) : return 60;
        interval(months(1), month(2))  : return 70;
        interval(months(2), years(1))  : return 70;
        interval(years(1),  years(2))  : return 70 + (ageInYears(age) * 2);
        interval(years(2),  years(4))  : return 70 + (ageInYears(age) * 2);
        interval(years(4),  years(6))  : return 70 + (ageInYears(age) * 2);
        interval(years(6),  years(10)) : return 70 + (ageInYears(age) * 2);
        interval(years(10), years(13)) : return 90;
        default                        : return 90;
    }
  }

  fun safeBpSysUpperBound(age) {
    days(age) in {
        interval(days(0)  , months(1)) : return 180;
        interval(months(1), month(2))  : return 180;
        interval(months(2), years(1))  : return 180;
        interval(years(1),  years(2))  : return 180;
        interval(years(2),  years(4))  : return 180;
        interval(years(4),  years(6))  : return 180;
        interval(years(6),  years(10)) : return 180;
        interval(years(10), years(13)) : return 180;
        default                        : return 180;
    }
  }

  fun safeTempLowerBound(age) {
    days(age) in {
        interval(days(0)  , months(1)) : return 36;
        interval(months(1), month(2))  : return 36;
        interval(months(2), years(1))  : return 36;
        interval(years(1),  years(2))  : return 36;
        interval(years(2),  years(4))  : return 36;
        interval(years(4),  years(6))  : return 36;
        interval(years(6),  years(10)) : return 36;
        interval(years(10), years(13)) : return 36;
        default                        : return 36;
    }
  }

  fun safeTempUpperBound(age) {
    days(age) in {
        interval(days(0)  , months(1)) : return 38;
        interval(months(1), month(2))  : return 38;
        interval(months(2), years(1))  : return 39;
        interval(years(1),  years(2))  : return 39;
        interval(years(2),  years(4))  : return 39;
        interval(years(4),  years(6))  : return 39;
        interval(years(6),  years(10)) : return 39;
        interval(years(10), years(13)) : return 39;
        default                        : return 39;
    }
  }

init machine SepsisScreenMachine {
  var patient;
  init state Running {
    on AgeEntered(age) do {
      this.age = age;

      this.hrLowerBound    = safeHRLowerBound(age);
      this.hrUpperBound    = safeHRUpperBound(age);

      this.bpSysLowerBound = safeBpSysLowerBound(age);
      this.bpSysUpperBound = safeBpSysUpperBound(age);

      this.tempLowerBound  = safeTempLowerBound(age);
      this.tempLowerBound  = safeTempUpperBound(age);

      broadcast ConfirmAgeEntered;
      goto Running;
    }

  }
}

machine AntiboiticTherapy {

}

machine SepsisScreening
  receives  ConfirmAgeEntered
          , ConfirmWeightEntered
          , ConfirmHighRiskConditionsEntered
          , ConfirmMeasurementsObtained {

  vars tabletApp, datastore, safetyBounds;

  init state Start(tabletApp, datastore, safetyBounds) {
    entry {
      this.tabletApp = tabletApp;
      this.datastore = datastore;
      this.safetyBounds   = safetyBounds;
    }
    on StartScreening do {
      goto  ObtainAge;
    }
  }
  state ObtainAge {
    entry {
      if (safetyBounds.age is undef) {
        instruct(tabletApp, "Enter patient age");
      } else {
        goto ObtainHighRiskConditions;
      }
    }
    on ConfirmAgeEntered do {
      goto ObtainHighRiskConditions;
    }
  }

  state ObtainHighRiskConditions{
    entry {
      if (safetyBounds.highRiskConditions is undef) {
        instruct(tableApp, "Enter high risk conditions");
      } else {
        goto ObtainMeasurements;
      }
    }
    on ConfirmHighRiskConditionsEntered do {
      goto ObtainMeasurements;
    }
  }

  state ObtainMeasurements {
    entry() {
      instruct(app, "Obtain measurements");
    }
    on ConfirmMeasurementsObtained do {
      goto calculatePSepsisScore;
    }
  }

  fun isNormal(parameter, normalBounds) {
    val storedMeasurement = obtainFrom(datastore, parameter);
    if (!(stored is undef)) {
      return storedMeasurement in normalBounds;
    } else {
      return true;
    }
  }

  state CalculateScore {
    entry() {
      hrAbnormal                 = !isNormal("hr",              safetyBounds.normalHR)
      bpSysAbnormal              = !isNormal("bpSys",           safetyBounds.normalBPSys)
      pulseQualityAbnormal       = !isNormal("pulseQuality",    safetyBounds.normalPulseQuality)
      tempAbnormal               = !isNormal("temp",            safetyBounds.normalTemp)
      mentalStatusAbnormal       = !isNormal("mentalStatus",    safetyBounds.normalMentalStatus)
      capillaryRefillAbnormal    = !isNormal("capillaryRefill", safetyBounds.normalCapRefill)
      skinColorAbnormal          = !isNormal("skinColor",       safetyBounds.normalSkinColor)
      highRiskCondition          = !(size(safetyBounds.highRiskCondition) == 0)

      var bucket1 = hrAbnormal || bpAbnormal || pqAbnormal;

      var bucket2 = tempAbnormal;

      var perfusion = capillaryRefillAbnormal || skinColorAbnormal;
      var bucket3   = mentalStatusAbnormal    || prefusion || highRiskConditions;

      var sepsisSuspected = bucket1 || bucket2 || bucket3
      send tabletApp, DisplayDiagnosis, ( hrAbnormal
                                        , bpSysAbnormal
                                        , pulseQualitAbnormal
                                        , tempAbnormal
                                        , mentalStatusAbnormal
                                        , capillaryRefillAbnormal
                                        , skinColorAbnormal
                                        , highRiskCondition)

      if (sepsisSuspected) {
        broadcast SepsisSuspected;
      } else {
        sleep(30);
        goto ObtainMeasurements;
      }
    }
  }
}

machine SepticShockScreening receives SepsisSuspected {
  var safetyBounds;

  fun lowerThanIfPresent(parameter, lowerBound) {
    val storedMeasurement = obtainFrom(datastore, parameter);
    if (!(stored is undef)) {
      return storedMeasurement < safetyBounds.parameter;
    } else {
      return true;
    }
  }

  fun equalToIfPresent(parameter, upperBound) {
    val storedMeasurement = obtainFrom(datastore, parameter);
    if (!(stored is undef)) {
      return storedMeasurement > safetyBounds.parameter;
    } else {
      return true;
    }
  }

  fun greaterThanIfPresent(parameter, upperBound) {
    val storedMeasurement = obtainFrom(datastore, parameter);
    if (!(stored is undef)) {
      return storedMeasurement > safetyBounds.parameter;
    } else {
      return true;
    }
  }

  init state Start {
    entry(safetyBounds) {
      this.safetyBounds = safetyBounds;
    }

    on SepsisSuspected do {
      var meanArterialPressureAbnormal = lowerThanIfPresent("meanArterialPressure", safetyBounds.normalMeanArterialPressure)

      if (meanArterialPressureAbnormal) {
        broadcast SepticShockSuspected;
      } else {
        if (   (obtainFrom(datastore, "ephinephrineDose")   > 5)
            || (obtainFrom(datastore, "norepinephrineDose") > 5)
            || (obtainFrom(datastore, "dopamineDose")       > 5) ) {
          broadcast SepticShockSuspected;
        }
      } else {
        var perfusion = 0;
        if ( lowerThanIfPressent("baseExcess", -5)) {
          perfusion = perfusion + 1;
        }

        if ( greaterThanIfPresent("lactate", 2 * safetyBounds.normalLactate)) {
          perfusion = perfusion + 1;
        }

        if ( lessThanIfPresent("urineOutput", 0.5)) {
          perfusion = perfusion + 1;
        }

        if ( equalToIfPresent("capillaryRefill", ">5s")) {
          perfusion = perfusion + 1;
        }
        // Todo Implement

        if (perfusion > 2) {
          broadcast SepticShockSuspected;
        }
  }
}

interface TabletApp
  receives  ConfirmAgeEntered
          , ConfirmWeightEntered
          , ConfirmHighRiskConditionsEntered { }

interface Datastore {  }

interface Sensors {  }

init machine PSepsisGuidanceSystem receives StopGuidance {
  var tabletApp     = createFromInterface(TabletApp);
  var datastore     = createFromInterface(Datastore);
  var safetyBounds  = new SafetyBounds();

  init state CreateMachines {
    entry {
      instruct(tabletApp, "Enter Age and Weight");
      new SepsisScreening(tabletApp, datastore, safetyBounds);
      new AntibioticTherapy();
      new SepsisScreening();
      new FluidTherapy();
      new SepticShockScreening();
      new IonotropicSupportTherapy(); }

    on StopGuidance do {
      // savelog();
    }

  }
}
