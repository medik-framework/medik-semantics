machine Heart receives stopEvent {
  vars hr, sysBP, pulseQuality, capillaryRefill;

  init state ObtainHeartVitals {
    entry() {
      hr              = obtain;
      sysBP           = obtain;
      pulseQuality    = obtain;
      capillaryRefill = obtain;

      broadcast HeartMachineUpdate;
      send this, updateHeartMachine;
    }

    on updateHeartMachine do {
      sleep(2);
      goto ObtainHeartVitals;
    }

    on stopEvent do {
      stop;
    }
  }
}

machine ImmuneSystem receives stopEvent {
  var temp;
  init state ObtainImmuneSystemVitals {
    entry {
      temp = obtain;

      broadcast ImmuneSystemUpdate;
      send this, updateImmuneSystem;
    }

    on updateImmuneSystem do {
      sleep(2);
      goto ObtainImmuneSystemVitals;
    }

    on stopEvent do {
      stop;
    }
  }
}

machine Patient {
  var heart              = new Heart();
  var immuneSystem       = new ImmuneSystem();
  var age                = obtain;
  var mentalStatus       = obtain;
  var highRiskConditions = obtain;
  var skinCondition      = obtain;
}

init machine SepsisScreenMachine {
  vars patient, age;

  fun days(age) {
    return age;
  }

  fun years(age) {
    return 365 * age;
  }

  fun ageInYears(age) {
    return age / 365;
  }

  fun abnormalHeartRate() {
      days(patient.age) in {
        interval(days(0), days(60))    : return !(patient.heart.hr in interval(100, 205));
        interval(days(60), years(1))   : return !(patient.heart.hr in interval(90, 190));
        interval(years(1), years(2))   : return !(patient.heart.hr in interval(80, 190));
        interval(years(2), years(4))   : return !(patient.heart.hr in interval(70, 140));
        interval(years(4), years(10))  : return !(patient.heart.hr in interval(60, 140));
        interval(years(10), years(13)) : return !(patient.heart.hr in interval(60, 130));
        default                        : return !(patient.heart.hr in interval(60, 130));
      }
  }

  fun abnormalBloodPressure() {
    days(patient.age) in {
        interval(days(0), days(28))    : return !(patient.heart.sysBP in interval(60, 180));
        interval(days(28), years(1))   : return !(patient.heart.sysBP in interval(70, 180));
        interval(years(1), years(10))  : return !(patient.heart.sysBP in interval(70 + (ageInYears(patient.age) * 2), 180));
        interval(years(10), years(20)) : return !(patient.heart.sysBP in interval(90, 180));
        default                        : return !(patient.heart.sysBP in interval(100, 180));
    }
  }

  fun abnormalTemp() {
    days(patient.age) in {
        interval(days(0), days(60))    : return !(patient.immuneSystem.temp in interval(36, 38));
        interval(days(60), years(20))  : return !(patient.immuneSystem.temp in interval(36, 38));
        default                        : return !(patient.immuneSystem.temp in interval(36, 38));
    }
  }

  fun abnormalPulseQuality() {
    return !(patient.heart.pulseQuality == "Normal");
  }

  fun abnormalMentalStatus() {
    return !(patient.mentalStatus == "Playing/Appropriate");
  }

  fun abnormalCapillaryRefill() {
    return !((patient.heart.capillaryRefill == "1") || (patient.heart.capillaryRefill == "2"));
  }

  fun abnormalSkinColor() {
    return (patient.skinCondition == "Gray") || (patient.skinCondition == "Gray and motted");
  }

  fun highRiskConditions() {
    return !(patient.highRiskConditions == 0);
  }

  init state ObtainAge {
    entry {
      instruct("Obtain patient age");
      age = get;
      print("Got age: " + age + "\n");
      goto ObtainVitals;
    }
  }

  state ObtainVitals {
    entry {
      patient = new Patient();
      goto SepsisScreen;
    }
  }

  state SepsisScreen {
    entry {
      var bucket1 = abnormalHeartRate() || abnormalBloodPressure() || abnormalPulseQuality();

      var bucket2 = abnormalTemp();

      var perfusion = abnormalCapillaryRefill() || abnormalSkinColor();
      var bucket3   = abnormalMentalStatus()    || perfusion || highRiskConditions();

      if (bucket1 || bucket2 || bucket3) {
        print("Sepsis suspected \n");
        instruct("Perform sepsis management\n");
      } else {
        print("Continue regular triage\n");
        instruct("Continue regular triage");
      }

      broadcast stopEvent;
    }
  }
}
